# generated by datamodel-codegen:
#   filename:  projects.json
#   timestamp: 2024-02-20T22:47:19+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field


class Nanomfg(BaseModel):
    class Config:
        extra = Extra.forbid

    base_pressure: Optional[float] = None
    carbon_source: Optional[str] = None
    catalyst: Optional[str] = None
    grain_size: Optional[str] = None
    max_temperature: Optional[float] = None
    orientation: Optional[str] = None
    sample_surface_area: Optional[float] = None
    sample_thickness: Optional[float] = None


class RedoxPotential(BaseModel):
    class Config:
        extra = Extra.forbid

    S0: Optional[float] = Field(
        None, description='Redox potential for electronic ground state S0. Units: eV'
    )
    S1: Optional[float] = Field(
        None,
        description='Redox potential for electronicically excited state S1. Units: eV',
    )
    T1: Optional[float] = Field(
        None,
        description='Redox potential for electronically excited state T1. Units: eV',
    )


class DipoleMoment(BaseModel):
    class Config:
        extra = Extra.forbid

    S0: Optional[float] = Field(
        None, description='Dipole moment for electronic ground state S0. Units: Debye'
    )
    S1: Optional[float] = Field(
        None,
        description='Dipole moment for electronicically excited state S1. Units: Debye',
    )
    T1: Optional[float] = Field(
        None,
        description='Dipole moment for electronically excited state T1. Units: Debye',
    )


class Field00(BaseModel):
    class Config:
        extra = Extra.forbid

    S1: Optional[float] = Field(
        None, description='0_0 energy for electronicically excited state S1. Units: eV'
    )
    T1: Optional[float] = Field(
        None, description='0_0 energy for electronically excited state T1. Units: eV'
    )


class Verde(BaseModel):
    class Config:
        extra = Extra.forbid

    vertical_excitation_energy: Optional[float] = Field(
        None, description='Vertical excitation energy. Units: eV'
    )
    ionization_potential: Optional[float] = Field(
        None, description='Ionization potential. Units: eV'
    )
    redox_potential: Optional[RedoxPotential] = Field(
        None, description='Redox potentials of the molecule. Units: eV'
    )
    dipole_moment: Optional[DipoleMoment] = Field(
        None, description='Dipole moment of the molecule. Units: Debye'
    )
    field_0_0: Optional[Field00] = Field(
        None,
        alias='0_0',
        description='0-0 transition energies of the molecule. Units: eV',
    )


class Split(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[str] = Field(
        None,
        description='The kind of partition of the dataset (train, test, validation, etc)',
    )
    path: Optional[str] = Field(
        None, description='The full filepath to the dataset file or directory'
    )
    label: Optional[str] = Field(None, description='A label to assign to this split')


class Classes(BaseModel):
    class Config:
        extra = Extra.forbid

    label: Optional[str] = Field(None, description='The label that exists in the data')
    name: Optional[str] = Field(None, description='The name the label maps onto.')


class Key(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Optional[List[str]] = Field(
        None,
        description='Column or header name for tabular data, key/path for HDF5 data',
    )
    type: Optional[str] = Field(None, description='Whether input or target')
    filter: Optional[str] = Field(None, description='How apply the defined key')
    description: Optional[str] = Field(
        None, description='Free text description of the key'
    )
    units: Optional[str] = Field(None, description='The units associated with the key')
    classes: Optional[Union[List[Dict[str, Any]], Classes]] = None


class Foundry(BaseModel):
    class Config:
        extra = Extra.forbid

    short_name: Optional[str] = None
    data_type: Optional[str] = Field(
        None, description='The kind of data in the dataset, e.g. tabular, json, hdf5'
    )
    task_type: Optional[List[str]] = Field(
        None,
        description='The type of task. e.g., supervised, unsupervised, generative.',
    )
    domain: Optional[List[str]] = Field(
        None,
        description='The domain of applicability. e.g., materials science, chemistry, machine vision',
    )
    n_items: Optional[float] = Field(
        None,
        description='The number of total items in the dataset including all splits.',
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='Define all partitions of the dataset (train, test, validation, etc.)',
    )
    keys: Optional[List[Key]] = Field(
        None, description='Keys describing how to load the data'
    )


class Projects(BaseModel):
    class Config:
        extra = Extra.forbid

    nanomfg: Optional[Nanomfg] = Field(None, description='Project block for NanoMFG.')
    verde: Optional[Verde] = Field(None, description='VERDE calculation outputs')
    foundry: Optional[Foundry] = Field(
        None, description='Project block for Foundry datasets.'
    )


class ProjectsBlock(BaseModel):
    projects: Optional[Projects] = Field(
        None, description='External organization-defined block.'
    )
