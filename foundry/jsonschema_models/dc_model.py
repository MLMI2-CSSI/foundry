# generated by datamodel-codegen:
#   filename:  dc.json
#   timestamp: 2024-03-19T16:08:59+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Annotated
from pydantic import BaseModel, Extra, Field, RootModel


class IdentifierType(Enum):
    DOI = 'DOI'


class Type(Enum):
    AlternativeTitle = 'AlternativeTitle'
    Subtitle = 'Subtitle'
    TranslatedTitle = 'TranslatedTitle'
    Other = 'Other'


class ContributorType(Enum):
    ContactPerson = 'ContactPerson'
    DataCollector = 'DataCollector'
    DataCurator = 'DataCurator'
    DataManager = 'DataManager'
    Distributor = 'Distributor'
    Editor = 'Editor'
    HostingInstitution = 'HostingInstitution'
    Other = 'Other'
    Producer = 'Producer'
    ProjectLeader = 'ProjectLeader'
    ProjectManager = 'ProjectManager'
    ProjectMember = 'ProjectMember'
    RegistrationAgency = 'RegistrationAgency'
    RegistrationAuthority = 'RegistrationAuthority'
    RelatedPerson = 'RelatedPerson'
    ResearchGroup = 'ResearchGroup'
    RightsHolder = 'RightsHolder'
    Researcher = 'Researcher'
    Sponsor = 'Sponsor'
    Supervisor = 'Supervisor'
    WorkPackageLeader = 'WorkPackageLeader'


class DateType(Enum):
    Accepted = 'Accepted'
    Available = 'Available'
    Collected = 'Collected'
    Copyrighted = 'Copyrighted'
    Created = 'Created'
    Issued = 'Issued'
    Submitted = 'Submitted'
    Updated = 'Updated'
    Valid = 'Valid'


class Date(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Annotated[
        Optional[str],
        Field(
            description='YYYY,YYYY-MM-DD, YYYY-MM-DDThh:mm:ssTZD or any other format or level of granularity described in W3CDTF. Use RKMS-ISO8601 standard for depicting date ranges.'
        ),
    ] = None
    dateType: DateType


class ResourceTypeGeneral(Enum):
    Audiovisual = 'Audiovisual'
    Collection = 'Collection'
    Dataset = 'Dataset'
    Event = 'Event'
    Image = 'Image'
    InteractiveResource = 'InteractiveResource'
    Model = 'Model'
    PhysicalObject = 'PhysicalObject'
    Service = 'Service'
    Software = 'Software'
    Sound = 'Sound'
    Text = 'Text'
    Workflow = 'Workflow'
    Other = 'Other'


class ResourceType(BaseModel):
    class Config:
        extra = Extra.forbid

    resourceType: Optional[str] = None
    resourceTypeGeneral: Annotated[
        ResourceTypeGeneral, Field(description='The general type of a resource.')
    ]


class AlternateIdentifier(BaseModel):
    class Config:
        extra = Extra.forbid

    alternateIdentifier: str
    alternateIdentifierType: str


class RelatedIdentifierType(Enum):
    ARK = 'ARK'
    arXiv = 'arXiv'
    bibcode = 'bibcode'
    DOI = 'DOI'
    EAN13 = 'EAN13'
    EISSN = 'EISSN'
    Handle = 'Handle'
    IGSN = 'IGSN'
    ISBN = 'ISBN'
    ISSN = 'ISSN'
    ISTC = 'ISTC'
    LISSN = 'LISSN'
    LSID = 'LSID'
    PMID = 'PMID'
    PURL = 'PURL'
    UPC = 'UPC'
    URL = 'URL'
    URN = 'URN'


class RelationType(Enum):
    IsCitedBy = 'IsCitedBy'
    Cites = 'Cites'
    IsSupplementTo = 'IsSupplementTo'
    IsSupplementedBy = 'IsSupplementedBy'
    IsContinuedBy = 'IsContinuedBy'
    Continues = 'Continues'
    IsNewVersionOf = 'IsNewVersionOf'
    IsPreviousVersionOf = 'IsPreviousVersionOf'
    IsPartOf = 'IsPartOf'
    HasPart = 'HasPart'
    IsReferencedBy = 'IsReferencedBy'
    References = 'References'
    IsDocumentedBy = 'IsDocumentedBy'
    Documents = 'Documents'
    IsCompiledBy = 'IsCompiledBy'
    Compiles = 'Compiles'
    IsVariantFormOf = 'IsVariantFormOf'
    IsOriginalFormOf = 'IsOriginalFormOf'
    IsIdenticalTo = 'IsIdenticalTo'
    HasMetadata = 'HasMetadata'
    IsMetadataFor = 'IsMetadataFor'
    Reviews = 'Reviews'
    IsReviewedBy = 'IsReviewedBy'
    IsDerivedFrom = 'IsDerivedFrom'
    IsSourceOf = 'IsSourceOf'


class DescriptionType(Enum):
    Abstract = 'Abstract'
    Methods = 'Methods'
    SeriesInformation = 'SeriesInformation'
    TableOfContents = 'TableOfContents'
    TechnicalInfo = 'TechnicalInfo'
    Other = 'Other'


class FunderIdentifierType(Enum):
    ISNI = 'ISNI'
    GRID = 'GRID'
    Crossref_Funder_ID = 'Crossref Funder ID'
    Other = 'Other'


class FunderIdentifier(BaseModel):
    class Config:
        extra = Extra.forbid

    funderIdentifier: str
    funderIdentifierType: FunderIdentifierType


class GeoLocationPoint(BaseModel):
    class Config:
        extra = Extra.forbid

    pointLongitude: Annotated[
        float, Field(description='Longitudinal dimension of point.')
    ]
    pointLatitude: Annotated[
        float, Field(description='Latitudinal dimension of point.')
    ]


class GeoLocationBox(BaseModel):
    class Config:
        extra = Extra.forbid

    westBoundLongitude: Annotated[
        float, Field(description='Western longitudinal dimension of box.')
    ]
    eastBoundLongitude: Annotated[
        float, Field(description='Eastern longitudinal dimension of box.')
    ]
    southBoundLatitude: Annotated[
        float, Field(description='Southern latitudinal dimension of box.')
    ]
    northBoundLatitude: Annotated[
        float, Field(description='Northern latitudinal dimension of box.')
    ]


class PolygonPoint(BaseModel):
    class Config:
        extra = Extra.forbid

    pointLongitude: Annotated[
        float, Field(description='Longitudinal dimension of point.')
    ]
    pointLatitude: Annotated[
        float, Field(description='Latitudinal dimension of point.')
    ]


class GeoLocationPolygon(BaseModel):
    class Config:
        extra = Extra.forbid

    polygonPoints: Annotated[
        List[PolygonPoint],
        Field(description='A point location in a polygon.', min_items=3),
    ]


class GeoLocation(BaseModel):
    geoLocationPoint: Annotated[
        Optional[GeoLocationPoint], Field(description='A point location in space.')
    ] = None
    geoLocationBox: Annotated[
        Optional[GeoLocationBox], Field(description='The spatial limits of a box.')
    ] = None
    geoLocationPlace: Annotated[
        Optional[str],
        Field(
            description='Spatial region or named place where the data was gathered or about which the data is focused.'
        ),
    ] = None
    geoLocationPolygon: Annotated[
        Optional[GeoLocationPolygon],
        Field(
            description='A drawn polygon area, defined by a set of points and lines connecting the points in a closed chain.'
        ),
    ] = None


class Doi(RootModel):
    root: Annotated[str, Field(description='Digital object identifier.', pattern='10\\..+/.+')]


class Year(RootModel):
    root: Annotated[int, Field(ge=0, le=9999, description='Year')]


class Language(RootModel):
    root: Annotated[
        str,
        Field(
            description='Allowed values are taken from IETF BCP 47, ISO 639-1 language codes.'
        ),
    ]


class Uri(RootModel):
    root: Annotated[str, Field(description='For adding future URI validation.')]


class NameIdentifier(BaseModel):
    nameIdentifier: str
    nameIdentifierScheme: str
    schemeURI: Optional[Uri] = None


class NameIdentifiers(RootModel):
    root: List[NameIdentifier]


class Identifier(BaseModel):
    identifier: Doi
    identifierType: IdentifierType
# class Identifier(BaseModel):
#     class Config:
#         extra = Extra.forbid

#     identifier: Doi
#     identifierType: IdentifierType


class Title(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Annotated[str, Field(min_length=1)]
    type: Optional[Type] = None
    lang: Optional[Language] = None


class Subject(BaseModel):
    class Config:
        extra = Extra.forbid

    subject: Optional[str] = None
    subjectScheme: Optional[str] = None
    schemeURI: Optional[Uri] = None
    valueURI: Optional[Uri] = None
    lang: Optional[Language] = None


class Contributor(BaseModel):
    class Config:
        extra = Extra.forbid

    contributorType: ContributorType
    contributorName: str
    nameIdentifiers: Optional[NameIdentifiers] = None
    affiliations: Optional[List[str]] = None
    familyName: Optional[str] = None
    givenName: Optional[str] = None


class RelatedIdentifier(BaseModel):
    class Config:
        extra = Extra.forbid

    relatedIdentifier: str
    relatedIdentifierType: RelatedIdentifierType
    relationType: RelationType
    relatedMetadataScheme: Optional[str] = None
    schemeURI: Optional[Uri] = None


class RightsListItem(BaseModel):
    class Config:
        extra = Extra.forbid

    rightsURI: Optional[Uri] = None
    rights: Optional[str] = None


class Description(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Annotated[str, Field(min_length=1)]
    descriptionType: Annotated[
        DescriptionType, Field(description='The type of the description.')
    ]
    lang: Optional[Language] = None


class AwardNumber(BaseModel):
    class Config:
        extra = Extra.forbid

    awardNumber: str
    awardURI: Optional[Uri] = None


class FundingReference(BaseModel):
    class Config:
        extra = Extra.forbid

    funderName: Annotated[str, Field(description='Name of the funding provider.')]
    funderIdentifier: Annotated[
        Optional[FunderIdentifier],
        Field(
            description='Uniquely identifies a funding entity, according to various types.'
        ),
    ] = None
    awardNumber: Annotated[
        Optional[AwardNumber],
        Field(
            description='The code assigned by the funder to a sponsored award (grant).'
        ),
    ] = None
    awardTitle: Annotated[
        Optional[str],
        Field(description='The human readable title of the award (grant).'),
    ] = None


class Dc1(BaseModel):
    class Config:
        extra = Extra.forbid

    identifier: Annotated[
        Optional[Identifier],
        Field(
            description='A persistent identifier that identifies a resource. Currently, only DOI is allowed.'
        ),
    ] = None
    creators: Annotated[
        List[Any],
        Field(
            description='The main researchers involved working on the data, or the authors of the publication in priority order. May be a corporate/institutional or personal name. Format: Family, Given'
        ),
    ]
    titles: List[Title]
    publisher: Annotated[
        str,
        Field(
            description='The name of the entity that holds, archives, publishes prints, distributes, releases, issues, or produces the resource. This property will be used to formulate the citation, so consider the prominence of the role. In the case of datasets, "publish" is understood to mean making the data available to the community of researchers.',
            min_length=1,
        ),
    ]
    publicationYear: Annotated[
        Year,
        Field(
            description='Year when the data is made publicly available. If an embargo period has been in effect, use the date when the embargo period ends. In the case of datasets, "publish" is understood to mean making the data available on a specific date to the community of researchers. If there is no standard publication year value, use the date that would be preferred from a citation perspective.'
        ),
    ]
    subjects: Optional[List[Subject]] = None
    contributors: Annotated[
        Optional[List[Contributor]],
        Field(
            description='The institution or person responsible for collecting, creating, or otherwise contributing to the developement of the dataset. The personal name format should be: Family, Given.'
        ),
    ] = None
    dates: Annotated[
        Optional[List[Date]], Field(description='Different dates relevant to the work.')
    ] = None
    language: Annotated[
        Optional[Language], Field(description='Primary language of the resource.')
    ] = None
    resourceType: Annotated[
        ResourceType,
        Field(
            description='The type of a resource. You may enter an additional free text description. The format is open, but the preferred format is a single term of some detail so that a pair can be formed with the sub-property.'
        ),
    ]
    alternateIdentifiers: Annotated[
        Optional[List[AlternateIdentifier]],
        Field(
            description='An identifier or identifiers other than the primary Identifier applied to the resource being registered. This may be any alphanumeric string which is unique within its domain of issue. May be used for local identifiers. AlternateIdentifier should be used for another identifier of the same instance (same location, same file).'
        ),
    ] = None
    relatedIdentifiers: Annotated[
        Optional[List[RelatedIdentifier]],
        Field(
            description='Identifiers of related resources. Use this property to indicate subsets of properties, as appropriate.'
        ),
    ] = None
    sizes: Annotated[
        Optional[List[str]],
        Field(description='Unstructures size information about the resource.'),
    ] = None
    formats: Annotated[
        Optional[List[str]],
        Field(
            description='Technical format of the resource. Use file extension or MIME type where possible.'
        ),
    ] = None
    version: Annotated[
        Optional[str],
        Field(
            description='Version number of the resource. If the primary resource has changed the version number increases. Register a new identifier for a major version change. Individual stewards need to determine which are major vs. minor versions. May be used in conjunction with properties 11 and 12 (AlternateIdentifier and RelatedIdentifier) to indicate various information updates. May be used in conjunction with property 17 (Description) to indicate the nature and file/record range of version.'
        ),
    ] = None
    rightsList: Annotated[
        Optional[List[RightsListItem]],
        Field(
            description='Any rights information for this resource. Provide a rights management statement for the resource or reference a service providing such information. Include embargo information if applicable. Use the complete title of a license and include version information if applicable.'
        ),
    ] = None
    descriptions: Annotated[
        Optional[List[Description]],
        Field(
            description='All additional information that does not fit in any of the other categories. May be used for technical information. It is a best practice to supply a description.'
        ),
    ] = None
    fundingReferences: Annotated[
        Optional[List[FundingReference]],
        Field(
            description='Information about financial support (funding) for the resource being registered.'
        ),
    ] = None
    geoLocations: Annotated[
        Optional[List[GeoLocation]],
        Field(
            description='Spatial region or named place where the data was gathered or about which the data is focused.'
        ),
    ] = None


class Dc(BaseModel):
    dc: Optional[Dc1] = None
